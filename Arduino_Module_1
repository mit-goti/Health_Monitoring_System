
#include <SoftwareSerial.h>
#include<string.h>
#include <SparkFun_ADXL345.h>

SoftwareSerial mySerial(3,4);
int val;
ADXL345 adxl = ADXL345();             // USE FOR I2C COMMUNICATION
int prev = 0;
int buzzerPin = 8;
long prev_time = 0;
int count_activity = 0;
int prev_action = 0;
int tempPin = 1;
const int buttonPin = 2;
int flagpanic = 1;
int buttonState = 0;  
int pulsePin = 0;                 // Pulse Sensor purple wire connected to analog pin 0
int blinkPin = 13;                // pin to blink led at each beat
int fadePin = 8;                  // pin to do fancy classy fading blink at each beat
int fadeRate = 0; 
int flag = 1;
char *longitude = "5";
char *latitude = "23.187500";
char *tim = "20170415092106.000";
char *st;
char Basic_str[100];
volatile float BPM = 80;
float temp = 80;// int that holds raw Analog in 0. updated every 2mS
volatile int Signal;                // holds the incoming raw data
volatile int IBI = 600;             // int that holds the time interval between beats! Must be seeded! 
volatile boolean Pulse = false;     // "True" when User's live heartbeat is detected. "False" when not a "live beat". 
volatile boolean QS = false;        // becomes true when Arduoino finds a beat.
float farh = 80;
// Regards Serial OutPut  -- Set This Up to your needs
static boolean serialVisual = true;   // Set to 'false' by Default.  Re-set to 'true' to see Arduino Serial Monitor ASCII Visual Pulse 
char* msg1 = "Heart Rate is not normal";
char* msg2 = "Patient has not moved for a long time";
char* msg3 = "Patient has fallen";
char* msg4 = "There is an emergency.";
volatile int rate[10];                      // array to hold last ten IBI values
volatile unsigned long sampleCounter = 0;          // used to determine pulse timing
volatile unsigned long lastBeatTime = 0;           // used to find IBI
volatile int P = 512;                      // used to find peak in pulse wave, seeded
volatile int T = 512;                     // used to find trough in pulse wave, seeded
volatile int thresh = 525;                // used to find instant moment of heart beat, seeded
volatile int amp = 100;                   // used to hold amplitude of pulse waveform, seeded
volatile boolean firstBeat = true;        // used to seed rate array so we startup with reasonable BPM
volatile boolean secondBeat = false;      // used to seed rate array so we startup with reasonable BPM
int prev_BPM = 0;
long last_activity_time = 0;


void setup()
{
  mySerial.begin(9600); // the GPRS baud rate
  Serial.begin(9600); // the GPRS baud rate
  delay(500);
  interruptSetup();
  pinMode(buttonPin, INPUT);
  pinMode(buzzerPin , OUTPUT);
  adxl.powerOn();                     // Power on the ADXL345

  adxl.setRangeSetting(16);           
  adxl.setSpiBit(0);                  
  adxl.setActivityXYZ(1,  1, 1);
  adxl.setActivityThreshold(95); 
  adxl.setInactivityXYZ(1, 0, 0);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
  adxl.setInactivityThreshold(75);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
  adxl.setTimeInactivity(10);
  adxl.setTapDetectionOnXYZ(0, 0, 1); // Detect taps in the directions turned ON "adxl.setTapDetectionOnX(X, Y, Z);" (1 == ON, 0 == OFF)
 
  // Set values for what is considered a TAP and what is a DOUBLE TAP (0-255)
  adxl.setTapThreshold(50);           // 62.5 mg per increment
  adxl.setTapDuration(15);            // 625 Î¼s per increment
  adxl.setDoubleTapLatency(80);       // 1.25 ms per increment
  adxl.setDoubleTapWindow(200);       // 1.25 ms per increment
 
  // Set values for what is considered FREE FALL (0-255)
  adxl.setFreeFallThreshold(7);       // (5 - 9) recommended - 62.5mg per increment
  adxl.setFreeFallDuration(30);       // (20 - 70) recommended - 5ms per increment
 
  // Setting all interupts to take place on INT1 pin
  //adxl.setImportantInterruptMapping(1, 1, 1, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
                                                        // This library may have a problem using INT2 pin. Default to INT1 pin.
  
  // Turn on Interrupts for each mode (1 == ON, 0 == OFF)
  adxl.InactivityINT(1);
  adxl.ActivityINT(1);
  adxl.FreeFallINT(1);
  adxl.doubleTapINT(1);
  adxl.singleTapINT(1);
  delay(5000);
  flag = 0;
  mySerial.print("AT+CMGF=1\r");
  delay(1000);
  ShowSerialData();
  mySerial.println("AT+CSMP=17,167,0,0");
  delay(1000);
  mySerial.println("AT");
  delay(1000);
  ShowSerialData();
  mySerial.println("AT+CGNSPWR=1");
  delay(1000);
  ShowSerialData();
  ShowSerialData();
  mySerial.println("AT+CSQ");
  delay(100);
  ShowSerialData();
  mySerial.println("AT+CGATT?");
  delay(100);
  ShowSerialData();
  mySerial.println("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"");
  delay(1000);
  ShowSerialData();
  mySerial.println("AT+SAPBR=3,1,\"APN\",\"imis/internet\"");
  delay(4000);
  ShowSerialData();
  mySerial.println("AT+SAPBR=1,1");
  delay(2000); 
  ShowSerialData();
  mySerial.println("AT+HTTPINIT"); //init the HTTP request
  delay(2000);
  ShowSerialData();
flag = 1;
}

void loop()
{
  int x,y,z;   
  adxl.readAccel(&x, &y, &z);         // Read the accelerometer values and store them in variables declared above x,y,z
  //Serial.println(millis());
  //Serial.println(prev_time);
  int ans = sqrt((x*x)+(y*y)+(z*z));
  if((ans - prev > 1 || prev - ans > 1) && millis()%50 )
  {
    prev = ans;
    prev_time = millis();
  }
  if(millis() - prev_time > 60000)
  {
    prev_time = millis();
    Not_moved_handler();
  }
  
  ADXL_ISR();
  if(BPM != prev_BPM)
  {
    
  }
   serialOutput();
   buttonState = digitalRead(buttonPin);
   if(buttonState == HIGH ) {
    flag = 0;
    panic_button();
    flag = 1;
   }
  if (QS == true) // A Heartbeat Was Found
    {    
      val = analogRead(tempPin);
    float mv = ( val/1024.0)*5000; 
  float cel = mv/10;
  farh = (cel*9)/5 + 32;
  Serial.println(BPM);
  if(BPM > 120 && BPM <= 150) {
    BPM = BPM/1.5;
  }
  else if(BPM > 150 && BPM <= 200) {
    BPM=BPM/2;
  }
  else if(BPM > 200) {
    BPM=BPM/3;
  }
  Serial.print("BPM = ");
  Serial.print(BPM);
  Serial.print("   ");
  Serial.print("TEMPRATURE = ");
  Serial.print(farh);
  Serial.print("*F");
  Serial.println();
  prev_BPM =BPM;  
      serialOutputWhenBeatHappens(); // A Beat Happened, Output that to serial. 
      BPM = BPM - 20;
      if(BPM > 140) {
        flag = 0;
        HeartRateCondition();
        flag = 1;
      }
      SubmitHttpRequest(1);
      QS = false; // reset the Quantified Self flag for next time    
    }
}

//Panic button
//Buzzer,Message,Location
void panic_button() {
  flag = 0;
  Serial.println("Panic Button pressed");
   while(buttonState==HIGH) {
   buttonState = digitalRead(buttonPin);
   }
   GPSRequest();
   SubmitHttpRequest(2);
   buzzer();
   SendTextMessage(4);
   flag = 1;
}

//Heart Rate unusual condition
//Buzzer , Message , Location
void HeartRateCondition() {
  flag = 0;
  GPSRequest();
  SendTextMessage(1);
  flag = 1;
}

//Fall handeling
//Buzzer , Message , Location

void Fall_handeler() {
  flag = 0;
  GPSRequest();
  SubmitHttpRequest(2);
  SendTextMessage(3);
  flag = 1;
  
}
//Not_moving
//Message , Location
void Not_moved_handler() {
  flag = 0;
  GPSRequest();
  SendTextMessage(2);
  flag = 1;
}


//Pulse Sensor Setting

void interruptSetup()
{     
  // Initializes Timer2 to throw an interrupt every 2mS.
  TCCR2A = 0x02;     // DISABLE PWM ON DIGITAL PINS 3 AND 11, AND GO INTO CTC MODE
  TCCR2B = 0x06;     // DON'T FORCE COMPARE, 256 PRESCALER 
  OCR2A = 0X7C;      // SET THE TOP OF THE COUNT TO 124 FOR 500Hz SAMPLE RATE
  TIMSK2 = 0x02;     // ENABLE INTERRUPT ON MATCH BETWEEN TIMER2 AND OCR2A
  sei();             // MAKE SURE GLOBAL INTERRUPTS ARE ENABLED      
}

void serialOutput()
{   // Decide How To Output Serial. 
 if (serialVisual == false)
    {
        sendDataToSerial('S', Signal);     // goes to sendDataToSerial function
    }        
}

void serialOutputWhenBeatHappens()
{    
 if (serialVisual == true) //  Code to Make the Serial Monitor Visualizer Work
   {            
     /*Serial.print("* Heart-Beat Happened * ");  //ASCII Art Madness
     Serial.print("BPM: ");
     Serial.println(BPM);*/
   }
 else
   {
     sendDataToSerial('B',BPM);   // send heart rate with a 'B' prefix
     sendDataToSerial('Q',IBI);   // send time between beats with a 'Q' prefix
   }   
}

void sendDataToSerial(char symbol, int data )
{
   Serial.print(symbol);
   Serial.println(data);                
}

void ledFadeToBeat()
{
   fadeRate -= 15;                         //  set LED fade value
   fadeRate = constrain(fadeRate,0,255);   //  keep LED fade value from going into negative numbers!
   analogWrite(fadePin,fadeRate);          //  fade LED
}

ISR(TIMER2_COMPA_vect) //triggered when Timer2 counts to 124
{
  if(flag) {  
  cli();                                      // disable interrupts while we do this
  Signal = analogRead(pulsePin);              // read the Pulse Sensor 
  sampleCounter += 2;                         // keep track of the time in mS with this variable
  int N = sampleCounter - lastBeatTime;       // monitor the time since the last beat to avoid noise
                                              //  find the peak and trough of the pulse wave
  if(Signal < thresh && N > (IBI/5)*3) // avoid dichrotic noise by waiting 3/5 of last IBI
    {      
      if (Signal < T) // T is the trough
      {                        
        T = Signal; // keep track of lowest point in pulse wave 
      }
    }

  if(Signal > thresh && Signal > P)
    {          // thresh condition helps avoid noise
      P = Signal;                             // P is the peak
    }                                        // keep track of highest point in pulse wave

  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
  // signal surges up in value every time there is a pulse
  if (N > 250)
  {                                   // avoid high frequency noise
    if ( (Signal > thresh) && (Pulse == false) && (N > (IBI/5)*3) )
      {        
        Pulse = true;                               // set the Pulse flag when we think there is a pulse
        IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS
        lastBeatTime = sampleCounter;               // keep track of time for next pulse
  
        if(secondBeat)
        {                        // if this is the second beat, if secondBeat == TRUE
          secondBeat = false;                  // clear secondBeat flag
          for(int i=0; i<=9; i++) // seed the running total to get a realisitic BPM at startup
          {             
            rate[i] = IBI;                      
          }
        }
  
        if(firstBeat) // if it's the first time we found a beat, if firstBeat == TRUE
        {                         
          firstBeat = false;                   // clear firstBeat flag
          secondBeat = true;                   // set the second beat flag
          sei();                               // enable interrupts again
          return;                              // IBI value is unreliable so discard it
        }   
      // keep a running total of the last 10 IBI values
      word runningTotal = 0;                  // clear the runningTotal variable    

      for(int i=0; i<=8; i++)
        {                // shift data in the rate array
          rate[i] = rate[i+1];                  // and drop the oldest IBI value 
          runningTotal += rate[i];              // add up the 9 oldest IBI values
        }

      rate[9] = IBI;                          // add the latest IBI to the rate array
      runningTotal += rate[9];                // add the latest IBI to runningTotal
      runningTotal /= 10;                     // average the last 10 IBI values 
      BPM = 60000/runningTotal;
      QS = true;                              // set Quantified Self flag 
      // QS FLAG IS NOT CLEARED INSIDE THIS ISR
    }                       
  }

  if (Signal < thresh && Pulse == true)
    {   // when the values are going down, the beat is over
      digitalWrite(blinkPin,LOW);            // turn off pin 13 LED
      Pulse = false;                         // reset the Pulse flag so we can do it again
      amp = P - T;                           // get amplitude of the pulse wave
      thresh = amp/2 + T;                    // set thresh at 50% of the amplitude
      P = thresh;                            // reset these for next time
      T = thresh;
    }

  if (N > 2500)
    {                           // if 2.5 seconds go by without a beat
      thresh = 512;                          // set thresh default
      P = 512;                               // set P default
      T = 512;                               // set T default
      lastBeatTime = sampleCounter;          // bring the lastBeatTime up to date        
      firstBeat = true;                      // set these to avoid noise
      secondBeat = false;                    // when we get the heartbeat back
    }

  sei();
  // enable interrupts when youre done!
  }
}


//AT commands

void GPSRequest()
{
  flag = 0;
  ShowSerialData();
  mySerial.println("AT+CGNSINF");
  delay(2000);
  ShowLATnLONG();
  delay(1000);
  flag = 1;
}

void ShowSerialData()
{
  while(mySerial.available()!=0)
    Serial.write(mySerial.read());
}

void ShowLATnLONG()
{
  int cnt=0;
    while(mySerial.available()!=0)
      Basic_str[cnt++] = mySerial.read();
     Serial.println(Basic_str);
 Serial.print("*************************************************\n");
 char * a ;
 a = strtok(Basic_str,",");
 st=strtok(NULL,",");
  tim=strtok(NULL,",");
  latitude=strtok(NULL,",");
  longitude=strtok(NULL,",");
  Serial.println(latitude);
  Serial.println(longitude);
  Serial.print("*************************************************\n");
}

void SendTextMessage(int a)
{
mySerial.println("AT+CMGS=\"+919586995343\"");
delay(1000);
ShowSerialData();
switch(a) {
  case 1:
    mySerial.println(msg1);
    break;
  case 2:
    mySerial.println(msg2);
    break;
  case 3:
    mySerial.println(msg3);
    break;  
  case 4:
    mySerial.println(msg4);
    break;
}
mySerial.println(latitude);
mySerial.println(longitude);
delay(1000);
ShowSerialData();
mySerial.println((char)26);
delay(1000);
ShowSerialData();
mySerial.println();
}


void SubmitHttpRequest(int option)
{
  flag = 0;
  String temp_string;
  switch(option) {
    case 1:
      mySerial.print("AT+HTTPPARA=\"URL\",\"http://healthmonitor1.000webhostapp.com/Data");
      mySerial.print("base.php?temp=");
      temp_string = "";
      temp_string.concat(temp);
      temp_string.concat("&bpm=");
      temp_string.concat(BPM);
      temp_string.concat("\"\r");
      mySerial.print(temp_string);
      delay(2000);
      ShowSerialData();
      break;
    case 2:
      mySerial.print("AT+HTTPPARA=\"URL\",\"http://healthmonitor1.000webhostapp.com/GPS.php?latitude=");
      temp_string = "";
      temp_string.concat(latitude);
      temp_string.concat("&longitude=");
      temp_string.concat(longitude);
      temp_string.concat("&time=");
      temp_string.concat(tim);
      temp_string.concat("\"\r");
      //23.187500&longitude=5&time=20170415092106.000      
      mySerial.print(temp_string);
      delay(2000);
      ShowSerialData();
      break;
  }
  mySerial.println("AT+HTTPACTION=0");//submit the request
  delay(10000);
  ShowSerialData();
  mySerial.println("AT+HTTPREAD");
  delay (300);
  ShowSerialData();
  mySerial.println("");
  delay(100);
  flag = 1;
}


void ADXL_ISR() {
  
  // getInterruptSource clears all triggered actions after returning value
  // Do not call again until you need to recheck for triggered actions
  byte interrupts = adxl.getInterruptSource();
  
  // Free Fall Detection
  if(adxl.triggered(interrupts, ADXL345_FREE_FALL)){
    Serial.println("*** FREE FALL ***");
    //add code here to do when free fall is sensed
  } 
  
  // Inactivity
  if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
    Serial.println("*** INACTIVITY ***");
    count_activity = 0;
    prev_action = 0;
     //add code here to do when inactivity is sensed
  }
  
  // Activity
  if(adxl.triggered(interrupts, ADXL345_ACTIVITY)){
    Serial.println("*** ACTIVITY ***");
    if(millis() - last_activity_time < 100) {
    count_activity++; }
    else {
      count_activity = 1;
    }
    last_activity_time = millis();
    Serial.println(count_activity);
    prev_action = 5;
     //add code here to do when activity is sensed
  }
  
  // Double Tap Detection
  if(adxl.triggered(interrupts, ADXL345_DOUBLE_TAP)){
    Serial.println("*** DOUBLE TAP ***");
    if(prev_action == 5 && count_activity >= 4)
    {
      Fall_handeler();
    }
    prev_action = 0;
    count_activity = 0;
     //add code here to do when a 2X tap is sensed
  }
  
  // Tap Detection
  if(adxl.triggered(interrupts, ADXL345_SINGLE_TAP)){
    Serial.println("*** TAP ***");
    if(prev_action == 5 && count_activity >= 10)
    {
      Fall_handeler();
    }
    prev_action = 0;
    count_activity = 0;
     //add code here to do when a tap is sensed
  } 
}

void buzzer() {
  while(true)
  {
    digitalWrite(buzzerPin , HIGH);
    delay(100);
    digitalWrite(buzzerPin , LOW);
    delay(100);
  }
}
